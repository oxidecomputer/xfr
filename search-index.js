var searchIndex = JSON.parse('{\
"xfr":{"doc":"An atomic ring for processing memory-mapped frames.","t":[4,3,3,3,13,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Error","Frame","FrameBuffer","FrameBufferIterator","NoSpace","Ring","RingConsumer","RingElement","RingIterator","RingProducer","alloc","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","consumable","consume","default","default","default","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get_addr","into","into","into","into","into","into","into","into","into","into_iter","into_iter","new","new","new","next","next","produce","read","read_mut","reserve","reset","ring","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write_at"],"q":["xfr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A Frame is a wrapper for a network data frame. The data …","A frame buffer holds an array of frames and an index that …","An iterator over a set of frames. In the event that a …","","A Ring arbitrates access to a frame buffer. Rings are …","A <code>RingConsumer</code> provides read access to a <code>Ring</code>.","A wring element is a wrapper around an address to a <code>Frame</code> …","An iterator over a set of <code>RingElement</code>s. In the event that …","A <code>RingProducer</code> provides write access to a <code>Ring</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","The ring function creates a <code>Ring</code> object and returns a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,0,0,0,0,0,2,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,9,9,8,8,2,3,9,5,6,7,8,9,1,1,2,3,4,5,6,7,8,9,1,9,2,3,4,5,6,7,8,9,1,4,6,2,3,5,4,6,7,8,8,7,8,0,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,7,7],"f":[null,null,null,null,null,null,null,null,null,null,[[["",0],["u64",0]],["framebufferiterator",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["ringelement",3]],[[["",0],["",0]]],[[["",0]],["ringiterator",3]],[[["",0],["usize",0]],["result",4,[["error",4]]]],[[]],[[]],[[],["ringelement",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["arc",3,[["framebuffer",3]]]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["usize",0]],["result",4,[["error",4]]]],[[["",0],["ringelement",3]]],[[["",0],["ringelement",3]]],[[["",0],["usize",0]],["result",4,[["ringiterator",3],["error",4]]]],[[["",0],["ringelement",3]]],[[["arc",3,[["framebuffer",3]]]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["ringelement",3]]],[[["",0],["ringelement",3],["usize",0]]]],"p":[[4,"Error"],[3,"FrameBuffer"],[3,"Frame"],[3,"FrameBufferIterator"],[3,"Ring"],[3,"RingIterator"],[3,"RingProducer"],[3,"RingConsumer"],[3,"RingElement"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};